{
    "Diagrams": [
        {
            "Description": "The left diagram represents a binary tree where each node has at most two children. The right diagram has a cross (X) next to it, indicating it is not a binary tree as one of the nodes has more than two children.",
            "Summary": "Binary tree with at most two children per node; Incorrect structure with more than two children on the right.",
            "Interpretation": "The left diagram shows a correctly structured binary tree, while the right diagram violates the binary tree property by having a node with more than two children.",
            "Index": 1,
            "Text": "Binary tree, children \u2264 2, X (indicating incorrect structure)",
            "Equations": [],
            "Related Concepts": [
                "Binary Tree",
                "Tree Data Structure"
            ],
            "Reillustration": "https://en.wikipedia.org/wiki/Binary_tree"
        },
        {
            "Description": "The diagram represents a binary search tree (BST) with nodes labeled as 10, 4, 13, 15, 1, 7, 6, and 9. The arrows indicate comparisons: 9 is greater than 4 and less than 10. 7 is less than 9.",
            "Summary": "Binary search tree with comparisons between nodes.",
            "Interpretation": "The diagram demonstrates the properties and placement rules of a BST, showing how nodes are compared and placed relative to each other.",
            "Index": 2,
            "Text": "9, 9 > 4, 9 < 10, 7 < 9, h = O(?)",
            "Equations": [
                "h = O(?)"
            ],
            "Related Concepts": [
                "Binary Search Tree",
                "Tree Data Structure",
                "Big-O Notation"
            ],
            "Reillustration": "https://en.wikipedia.org/wiki/Binary_search_tree"
        },
        {
            "Description": "The image defines Big-O notation and provides the formal mathematical definition for it. Specifically, it shows that f(n) = O(g(n)) if and only if there exist positive constants C and N0 such that for all N \u2265 N0, the absolute value of f(N) is less than or equal to C times g(N).",
            "Summary": "Definition and formal mathematical expression of Big-O notation.",
            "Interpretation": "Big-O notation is used to classify algorithms according to how their run time or space requirements grow as the input size grows.",
            "Index": 3,
            "Text": "definition, big-O, f(n) = O(g(n)), \\\\Leftrightarrow \\\\exists C, N_0 \\\\in \\\\mathbb{R}, \\\\text{ s.t. } \\\\forall N \\\\geq N_0, |f(N)| \\\\leq c \\\\cdot g(N)",
            "Equations": [
                "f(n) = O(g(n))",
                "\\\\Leftrightarrow \\\\exists C, N_0 \\\\in \\\\mathbb{R}, \\\\text{ s.t. } \\\\forall N \\\\geq N_0, |f(N)| \\\\leq c \\\\cdot g(N)"
            ],
            "Related Concepts": [
                "Big-O Notation",
                "Algorithm Complexity"
            ],
            "Reillustration": "https://en.wikipedia.org/wiki/Big_O_notation"
        }
    ]
}