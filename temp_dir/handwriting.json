{
    "Title": "Binary Search Tree",
    "Content": [
        {
            "SectionTitle": "Binary Tree",
            "Text": "A tree data structure where each node has at most 2 children.\nChildren: 0, 1, 2 children are allowed.",
            "Equations": [],
            "Diagrams": [
                {
                    "Description": "Valid binary tree with two children",
                    "Interpretation": "A binary tree where each node has at most 2 children."
                },
                {
                    "Description": "Valid binary tree with one child",
                    "Interpretation": "A binary tree where each node has at most 2 children."
                },
                {
                    "Description": "Invalid binary tree with more than two children",
                    "Interpretation": "A tree structure where a node has more than 2 children, which is invalid for a binary tree."
                }
            ]
        },
        {
            "SectionTitle": "Insert Operation",
            "Text": "Example:\n9 < 10 (comparison)\n10\n/\n4\n/ \\\nO   O\n\n9 > 4 (comparison)\n10\n/\n4\n/ \\\n9   O\nThe value 9 is inserted here.\nHeight of the Tree: The height of the tree affects the time complexity.",
            "Equations": [
                "O(\\text{?})"
            ],
            "Diagrams": [
                {
                    "Description": "Initial binary tree with root 10 and left child 4",
                    "Interpretation": "Illustrates the comparison of 9 with 10 and 4, leading to the insertion of 9."
                },
                {
                    "Description": "Binary tree after insertion",
                    "Interpretation": "Shows the binary tree structure after inserting the value 9."
                }
            ]
        },
        {
            "SectionTitle": "Big O Notation",
            "Text": "Describes the upper bound of the time complexity of an algorithm.",
            "Equations": [
                "|f(n)| \\leq C \\cdot g(n)"
            ],
            "Diagrams": []
        },
        {
            "SectionTitle": "Delete Operation",
            "Text": "Step 1:\nStart from the root.\nFind the node to delete.\nO (root)\n/\nO\n/ \\\nO   O (node to delete)\n\nStep 2:\nReconnect the right child to the parent.\nO\n/\nO\n/ \\\nO   O (right child)\nNote: The exact steps for reconnecting are unclear.",
            "Equations": [],
            "Diagrams": [
                {
                    "Description": "Binary tree before deletion",
                    "Interpretation": "Shows the initial state of the binary tree before deletion."
                },
                {
                    "Description": "Binary tree after deletion",
                    "Interpretation": "Illustrates the state of the binary tree after reconnecting the right child to the parent."
                }
            ]
        }
    ],
    "Summary": "The document covers the basics of binary search trees, including the definition and structure of a binary tree, the insert operation with an example, the concept of Big O notation, and the delete operation with steps and diagrams."
}