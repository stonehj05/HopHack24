{
    "Title": "Binary Search Tree",
    "Content": [
        {
            "SectionTitle": "Binary Tree",
            "Text": "A binary tree is a data structure where each node has 0, 1, or 2 children. Example:",
            "Equations": [],
            "Diagrams": [
                {
                    "Description": "Diagram showing a valid binary tree and an invalid binary tree",
                    "Interpretation": "The left diagram represents a valid binary tree structure, while the right diagram represents an invalid structure."
                }
            ]
        },
        {
            "SectionTitle": "Insert Operation",
            "Text": "To insert a value in a binary search tree:\n1. Compare the value with the root.\n2. If the value is less than the root, move to the left child; if greater, move to the right child.\n3. Repeat the process until you find a suitable position.",
            "Equations": [],
            "Diagrams": [
                {
                    "Description": "Example of inserting 9 into the tree",
                    "Interpretation": "9 is less than 10, so we move left. 9 is greater than 4, so we move right. 9 is inserted as the right child of 4."
                }
            ]
        },
        {
            "SectionTitle": "Big O Notation",
            "Text": "Used to describe the upper bound of the time complexity.",
            "Equations": [
                "|f(n)| \\leq C \\cdot g(n)"
            ],
            "Diagrams": []
        },
        {
            "SectionTitle": "Delete Operation",
            "Text": "To delete a node from a binary search tree:\n1. STEP 1: Start from the root and find the node to delete.\n2. STEP 2: Handle different cases for node deletion:\n- If the node has no children, simply remove it.\n- If the node has one child, reconnect the child to the parent of the node.\n- If the node has two children, find the in-order successor (smallest node in the right subtree) and replace the node's value with it, then delete the in-order successor.",
            "Equations": [],
            "Diagrams": []
        }
    ],
    "Summary": "Binary Search Trees (BST) allow insertion, deletion, and lookup operations in O(height) time complexity. The structure and operations of BSTs ensure efficient data management, but understanding the nuances of each operation is crucial for effective implementation."
}