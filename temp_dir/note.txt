# Binary Search Tree

## Summary
This lecture covers the basics of binary search trees (BSTs), including the definition and structure of a binary tree, the insert and delete operations with examples, the concept of Big O notation, and the time complexity of these operations. The lecture also briefly touches on the importance of tree balancing and introduces Big O notation for algorithm complexity.

## Outline
1. Introduction to Binary Trees
   - Definition and structure
   - Examples of valid and invalid binary trees
2. Binary Search Trees (BST)
   - Definition and properties
   - Use cases and advantages
3. Insert Operation in BST
   - Step-by-step process
   - Example with diagrams
4. Delete Operation in BST
   - Step-by-step process
   - Example with diagrams
5. Time Complexity
   - Relationship between tree height and number of nodes
   - Best and worst-case scenarios
6. Big O Notation
   - Definition and formal representation
   - Application to BST operations

## Detailed Notes

### 1. Introduction to Binary Trees
- **Definition**: A binary tree is a tree data structure where each node has at most two children, referred to as the left and right children.
- **Structure**: Each node can have 0, 1, or 2 children.
- **Examples**:
  - Valid binary tree with two children.
  - Valid binary tree with one child.
  - Invalid binary tree with more than two children.

### 2. Binary Search Trees (BST)
- **Definition**: A binary search tree is a binary tree with an additional property: for any given node, all values in the left subtree are less than the node's value, and all values in the right subtree are greater.
- **Properties**:
  - Efficient for search, insertion, and deletion operations.
  - Maintains a sorted order within the tree.
- **Use Cases**: Useful for dynamically changing data that requires quick lookup times.

### 3. Insert Operation in BST
- **Process**:
  1. Start at the root.
  2. Compare the value to be inserted with the current node.
  3. If the value is smaller, go left; if larger, go right.
  4. Repeat until an empty spot is found.
  5. Insert the new value at the empty spot.
- **Example**:
  - Initial tree: Root = 10, Left child = 4.
  - Insert value 9:
    - Compare 9 with 10 (9 < 10, go left).
    - Compare 9 with 4 (9 > 4, go right).
    - Insert 9 as the right child of 4.

### 4. Delete Operation in BST
- **Process**:
  1. Find the node to delete.
  2. If the node has no children, remove it.
  3. If the node has one child, reconnect the child to the parent.
  4. If the node has two children, replace it with its in-order successor or predecessor.
- **Example**:
  - Delete node with value 10:
    - If 10 has no children, remove it.
    - If 10 has one child, replace 10 with that child.
    - If 10 has two children, find the in-order successor (smallest value in the right subtree) and replace 10 with that value.

### 5. Time Complexity
- **Height of the Tree**: The height of the tree affects the time complexity of operations.
  - Best case (balanced tree): Height is logarithmic with respect to the number of nodes (O(log n)).
  - Worst case (unbalanced tree): Height is equal to the number of nodes (O(n)).
- **Importance of Balancing**: Balancing techniques like AVL trees and Red-Black trees help maintain the logarithmic height.

### 6. Big O Notation
- **Definition**: Big O notation describes the upper bound of an algorithm's time complexity, focusing on the worst-case scenario.
- **Formal Representation**:
  - A function \( f(n) \) is Big-O of \( g(n) \):
    \[
    f(n) = O(g(n))
    \]
  - There exist constants \( C \) and \( N_0 \) such that for all \( N \geq N_0 \):
    \[
    \exists C, N_0 \in \mathbb{R}, \text{ s.t. } \forall N \geq N_0
    \]
  - The absolute value of \( f(N) \) is less than or equal to a constant \( c \) times \( g(N) \):
    \[
    |f(N)| \leq c \cdot g(N)
    \]
- **Application to BST**:
  - Insert and delete operations in a balanced BST have a time complexity of \( O(\log n) \).

## Diagrams & Related Resources
- [Comparison between a binary tree and a non-binary tree](https://en.wikipedia.org/wiki/Binary_tree)
- [Binary Search Tree with a highlighted path showing traversal logic](https://en.wikipedia.org/wiki/Binary_search_tree)
- [Definition of Big-O notation and its formal mathematical representation](https://en.wikipedia.org/wiki/Big_O_notation)